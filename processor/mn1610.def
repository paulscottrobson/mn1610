
//	%R 		Register from bits 8,9,10 [R0..R4,SP,STR,Dummy]
//	%S 		Register from bits 0,1,2
//	%O 		Operation name from bits 11.15 and bit 3

//	%M 		Mode from bit 11,12,13 [Zero,Relative,Zero.Ind,Relative.Ind,Const.X0,Const.X0.Ind.X,X1.Ind.Y]

//
//	@EAC	Code to extract address from bits 11..13 -> MA
//	READ()	Read MA word to MB
//	WRITE() Write MB word to MA
//	PUSH()	Push MB on the stack
//	PULL()	Pop MB off the stack
//	SKIP() 	Skip if zero.
//

// **************************************************************************************
// **************************************************************************************
//
//									MEMORY OPERATIONS 
//
// **************************************************************************************
// **************************************************************************************

// **************************************************************************************
//
//									Branch instructions
//
// **************************************************************************************	

11...111 		"B %M"									// Branch
	@EAC;IC = MA

10...111		"BAL %M"								// Branch Link
	@EAC;MB = IR;PUSH();IC = MA

// **************************************************************************************
//
//									IMS and DMS instructions
//
// **************************************************************************************

11...110 		"IMS %M"								// Increment, skip if zero
	@EAC;READ();MB = (MB + 1) & 0xFFFF;WRITE();if (MB == 0) SKIP()

10...110 		"DMS %M"								// Decrement, skip if zero
	@EAC;READ();MB = (MB - 1) & 0xFFFF;WRITE();if (MB == 0) SKIP()

// **************************************************************************************
//
//							Memory Operations 1 X MMM RRR DDDDDDDD
//
// **************************************************************************************

11......		"L %R,%M"								// Read memory
	@EAC;READ();%R = MB

10...... 		"ST %R,%M"								// Write Memory.
	@EAC;MB = %R;WRITE()

// **************************************************************************************
// **************************************************************************************
//
//										BINARY OPERATIONS
//
// **************************************************************************************
// **************************************************************************************

01011... 		"%O %R,%S"								// Add and Subtract
	MB = *RP[IR & 7];if (IR & 8) { %R = ADD(0);} else { MB ^= 0xFF;}

// **************************************************************************************
//
//
//
// **************************************************************************************	